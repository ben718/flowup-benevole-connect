// filepath: c:\Users\b.mvouama\Downloads\siteweb\voisin-solidaire\src\hooks\useCategories.js
import { useEffect, useState } from 'react';
import { supabase, checkSupabaseConnection } from '../lib/supabase';
import { safeSupabaseCall, safePromise } from '../lib/errorHandling';

// CatÃ©gories par dÃ©faut Ã  utiliser en cas d'Ã©chec de chargement
const DEFAULT_CATEGORIES = [
  { id: 1, name: 'Aide aux courses', icon: 'ðŸ›’', color: 'bg-vs-blue-primary text-white', active: true },
  { id: 2, name: 'Transport', icon: 'ðŸš—', color: 'bg-vs-green-secondary text-white', active: true },
  { id: 3, name: 'Compagnie', icon: 'ðŸ‘‹', color: 'bg-vs-orange-accent text-white', active: true },
  { id: 4, name: 'Bricolage', icon: 'ðŸ”¨', color: 'bg-purple-500 text-white', active: true },
  { id: 5, name: 'Jardinage', icon: 'ðŸŒ±', color: 'bg-green-600 text-white', active: true },
  { id: 6, name: 'Informatique', icon: 'ðŸ’»', color: 'bg-blue-600 text-white', active: true },
  { id: 7, name: 'Autre', icon: 'ðŸ“‹', color: 'bg-gray-600 text-white', active: true }
];

export const useCategories = () => {
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        setLoading(true);
        
        // VÃ©rifier la connexion rÃ©seau avant de faire l'appel
        if (!navigator.onLine) {
          setCategories(DEFAULT_CATEGORIES);
          setError("Pas de connexion Internet. Utilisation des catÃ©gories par dÃ©faut.");
          return;
        }
        
        // VÃ©rifier d'abord la connexion Ã  Supabase
        const [connectionError, connectionStatus] = await safePromise(
          checkSupabaseConnection('categories'),
          'vÃ©rification de la connexion Ã  Supabase'
        );
        
        if (connectionError || !connectionStatus?.connected) {
          setCategories(DEFAULT_CATEGORIES);
          setError(`ProblÃ¨me de connexion Ã  Supabase. Utilisation des catÃ©gories par dÃ©faut. (${connectionError?.message || connectionStatus?.error || 'Erreur inconnue'})`);
          return;
        }
        
        // Ajouter un timeout pour Ã©viter les attentes infinies
        const [timeoutOrQueryError, data] = await safePromise(
          Promise.race([
            safeSupabaseCall(
              supabase
                .from('categories')
                .select('*')
                .eq('active', true)
                .order('name', { ascending: true }),
              'rÃ©cupÃ©ration des catÃ©gories'
            ).then(([error, data]) => {
              if (error) throw error;
              return data;
            }),
            new Promise((_, reject) => 
              setTimeout(() => reject(new Error("DÃ©lai d'attente dÃ©passÃ© lors du chargement des catÃ©gories")), 15000)
            )
          ]),
          'rÃ©cupÃ©ration des catÃ©gories avec timeout'
        );
        
        if (timeoutOrQueryError) {
          console.warn('Erreur lors du chargement des catÃ©gories, utilisation des valeurs par dÃ©faut:', timeoutOrQueryError);
          setCategories(DEFAULT_CATEGORIES);
          setError(`Impossible de charger les catÃ©gories: ${timeoutOrQueryError.message}`);
        } else {
          setCategories(data.length ? data : DEFAULT_CATEGORIES);
          setError(null);
        }
      } catch (err) {
        console.error('Erreur non gÃ©rÃ©e lors du chargement des catÃ©gories:', err);
        setCategories(DEFAULT_CATEGORIES);
        setError(`Erreur inattendue: ${err.message}`);
      } finally {
        setLoading(false);
      }
    };
    
    fetchCategories().catch(console.error);
  }, []);

  const getCategoryById = (id) => {
    const category = categories.find(cat => cat.id === id);
    return category || categories.find(cat => cat.name === 'Autre') || categories[0];
  };

  const getCategoryByName = (name) => {
    const category = categories.find(cat => cat.name.toLowerCase() === name.toLowerCase());
    return category || categories.find(cat => cat.name === 'Autre') || categories[0];
  };

  return { 
    categories, 
    loading, 
    error, 
    getCategoryById,
    getCategoryByName
  };
};

export default useCategories;
